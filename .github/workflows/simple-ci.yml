on:
  push:
    branches:
      - main
  pull_request:

name: Simple Rust CI

jobs:
  check:
    name: Check, Lint, Format, Test, and PostgreSQL
    runs-on: ubuntu-latest

    env:
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
      DB_PORT: ${{ secrets.DB_PORT }}
      DB_HOST: ${{ secrets.DB_HOST }}
      APP_ENV: ${{ secrets.APP_ENV }}
      APP_HOST: ${{ secrets.APP_HOST }}
      APP_PORT: ${{ secrets.APP_PORT }}
      CERT_FILE: ${{ secrets.CERT_FILE }}
      KEY_FILE: ${{ secrets.KEY_FILE }}

    steps:
      - uses: actions/checkout@v3

      # Install Docker Compose
      - name: Install Docker Compose
        run: |
          curl -L https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose

      # Start PostgreSQL container using Docker Compose
      - name: Set up Docker Compose for PostgreSQL
        run: docker-compose up docker-compose.db.yml -d

      # Wait for PostgreSQL to be ready
      - name: Wait for PostgreSQL
        run: |
          until docker exec $(docker ps -q --filter "name=db") pg_isready -U ${{ env.POSTGRES_USER }}; do
            echo "Waiting for PostgreSQL..."
            sleep 5
          done

      # Install Rust toolchain
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      # Install Rustfmt and Clippy
      - name: Install Rustfmt and Clippy
        run: |
          rustup component add rustfmt
          rustup component add clippy

      # Install dependencies
      - name: Install dependencies
        run: cargo build --release

      # Run fmt (checks if code is formatted)
      - name: Run rustfmt
        run: cargo fmt -- --check

      # Run clippy (for linting)
      - name: Run Clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

      # Run tests with DATABASE_URL
      - name: Run tests
        env:
          DATABASE_URL: postgresql://${{env.POSTGRES_USER}}:${{env.POSTGRES_PASSWORD}}@db${{env.DB_HOST}}:${{env.DB_PORT}}/${{env.POSTGRES_DB}}?sslmode=prefer
        run: cargo test --release

      # Cleanup
      - name: Cleanup Docker
        run: docker-compose down
