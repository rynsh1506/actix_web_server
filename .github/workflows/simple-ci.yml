on:
  push:
    branches:
      - main
  pull_request:

name: Simple Rust CI

jobs:
  check:
    name: Check, Lint, Format, Test, and PostgreSQL
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Setup .env file
        run: |
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
          echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> .env
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
          echo "APP_ENV=${{ secrets.APP_ENV }}" >> .env
          echo "APP_HOST=${{ secrets.APP_HOST }}" >> .env
          echo "APP_PORT=${{ secrets.APP_PORT }}" >> .env
          echo "CERT_FILE=${{ secrets.CERT_FILE }}" >> .env
          echo "KEY_FILE=${{ secrets.KEY_FILE }}" >> .env
          echo "DATABASE_URL=postgresql://${{secrets.POSTGRES_USER}}:${{env.POSTGRES_PASSWORD}}@${{env.DB_HOST}}:${{env.DB_PORT}}/${{env.POSTGRES_DB}}" >> .env
          cat .env

      # Install Docker Compose
      - name: Install Docker Compose
        run: |
          curl -L https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose

      # Start PostgreSQL container using Docker Compose
      - name: Set up Docker Compose for PostgreSQL
        run: docker-compose -f docker-compose.db.yml up -d -V

      # Install Rust toolchain
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      # Install Rustfmt and Clippy
      - name: Install Rustfmt and Clippy
        run: |
          rustup component add rustfmt
          rustup component add clippy

      # Install dependencies
      - name: Install dependencies
        run: cargo build --release

      # Run fmt (checks if code is formatted)
      - name: Run rustfmt
        run: cargo fmt -- --check

      # Run clippy (for linting)
      - name: Run Clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

      # Run tests with DATABASE_URL
      - name: Run tests
        run: cargo test --release

      # Cleanup
      - name: Cleanup Docker
        run: docker-compose down
